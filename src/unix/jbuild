(jbuild_version 1)

;; pre-processing cppo files

(rule
 ((targets (lwt_unix.ml))
  (deps    (lwt_unix.cppo.ml))
  (action  (run ${bin:cppo} -V OCAML:${ocaml_version} ${<} -o ${@}))))

(rule
 ((targets (lwt_unix.mli))
  (deps    (lwt_unix.cppo.mli))
  (action  (run ${bin:cppo} -V OCAML:${ocaml_version} ${<} -o ${@}))))

;; lwt feature discovery
;;
;; we use 2 config files
;;
;; - ocamlc_config which is generated here from calling 'ocamlc -config'
;; - lwt_config which is optionally generated by src/utils/configure.ml
;;   and contains configuration options for libev, pthread, android etc.
;;
;; The later configration file can be used for development and by opam
;; to enable features based on the system configuration.

;; run ocamlc -config
(rule
 ((targets (ocamlc_config))
  (action (with-stdout-to ${@} (run ${OCAMLC} -config)))))

;; generate an empty lwt_config if it doesn't exist.
;; the discover script will generate defaults as appropriate.
(rule
 ((targets (lwt_config))
  (action (with-stdout-to lwt_config (echo "")))))

;; note; the call to (and dependancy on) ocamlfind is avoided by adding:
;; -ocamlc ${OCAMLC}
;; however, this only works on ocaml >= 4.04 due to passing options to ocamlc as
;; "-cclib -o -cclib <file>"
(rule
 ((targets (unix_c_flags.sexp
            unix_c_library_flags.sexp
            lwt_config.h
            lwt_config.ml))
  (deps (config/discover.exe ocamlc_config lwt_config))
  (action (run ${<}
    -ocamlc-config ocamlc_config      ;; generated above
    -lwt-config lwt_config
  ))))

;; gen_stubs.ml

(rule
 ((targets (
    lwt_unix_job_access.c
    lwt_unix_job_chdir.c
    lwt_unix_job_chmod.c
    lwt_unix_job_chown.c
    lwt_unix_job_chroot.c
    lwt_unix_job_close.c
    lwt_unix_job_fchmod.c
    lwt_unix_job_fchown.c
    lwt_unix_job_fdatasync.c
    lwt_unix_job_fsync.c
    lwt_unix_job_ftruncate.c
    lwt_unix_job_link.c
    lwt_unix_job_lseek.c
    lwt_unix_job_mkdir.c
    lwt_unix_job_mkfifo.c
    lwt_unix_job_rename.c
    lwt_unix_job_rmdir.c
    lwt_unix_job_symlink.c
    lwt_unix_job_tcdrain.c
    lwt_unix_job_tcflow.c
    lwt_unix_job_tcflush.c
    lwt_unix_job_tcsendbreak.c
    lwt_unix_job_truncate.c
    lwt_unix_job_unlink.c
    lwt_unix_jobs_generated.ml
  ))
  (deps (stubs/gen_stubs.exe))
  (action (run ${<}))))

;; main library
;; Lwt_unix_jobs_generated and Lwt_config should be hidden

(library
 ((name lwt_unix)
  (public_name lwt.unix)
  (synopsis "Unix support for Lwt")
  (optional)
  (wrapped false)
  (libraries (lwt lwt.log unix bigarray))
  (c_names (
    lwt_unix_stubs
    lwt_libev_stubs
    lwt_process_stubs
    lwt_unix_job_access
    lwt_unix_job_chdir
    lwt_unix_job_chmod
    lwt_unix_job_chown
    lwt_unix_job_chroot
    lwt_unix_job_close
    lwt_unix_job_fchmod
    lwt_unix_job_fchown
    lwt_unix_job_fdatasync
    lwt_unix_job_fsync
    lwt_unix_job_ftruncate
    lwt_unix_job_link
    lwt_unix_job_lseek
    lwt_unix_job_mkdir
    lwt_unix_job_mkfifo
    lwt_unix_job_rename
    lwt_unix_job_rmdir
    lwt_unix_job_symlink
    lwt_unix_job_tcdrain
    lwt_unix_job_tcflow
    lwt_unix_job_tcflush
    lwt_unix_job_tcsendbreak
    lwt_unix_job_truncate
    lwt_unix_job_unlink
  ))
  (install_c_headers (
    lwt_config
    lwt_unix
    lwt_unix_unix
    lwt_unix_windows
  ))
  (c_flags (:include unix_c_flags.sexp))
  (c_library_flags (:include unix_c_library_flags.sexp))
))
